#include <iostream>

using namespace std;
int tablaJoc[4][4];


void afiseazaMatrice() {
	cout << endl;
	for (int i = 1; i <= 3; i++) {
		for (int j = 1; j <= 3; j++) {
			if (tablaJoc[i][j] == 1) cout << "X" << " ";
			else if (tablaJoc[i][j] == 2) cout << "Y" << " ";
			else cout << tablaJoc[i][j] << " ";
		}
		cout << endl;
	}
}

int randComputer() {
	//Prima linie
	if (tablaJoc[1][1] == 1 && tablaJoc[1][2] == 1 && tablaJoc[1][3] == 0) { tablaJoc[1][3] = 2; return 0; }
	if (tablaJoc[1][1] == 1 && tablaJoc[1][3] == 1 && tablaJoc[1][2] == 0) { tablaJoc[1][2] = 2; return 0; }
	if (tablaJoc[1][2] == 1 && tablaJoc[1][3] == 1 && tablaJoc[1][1] == 0) { tablaJoc[1][1] = 2; return 0; }
	
	// A doua linie
	if (tablaJoc[2][1] == 1 && tablaJoc[2][2] == 1 && tablaJoc[2][3] == 0){ tablaJoc[2][3] = 2; return 0; }
	if (tablaJoc[2][1] == 1 && tablaJoc[2][3] == 1 && tablaJoc[2][2] == 0){ tablaJoc[2][2] = 2; return 0; }
	if (tablaJoc[2][2] == 1 && tablaJoc[2][3] == 1 && tablaJoc[2][1] == 0){ tablaJoc[2][1] = 2; return 0; }

	//A treia linie
	if (tablaJoc[3][1] == 1 && tablaJoc[3][2] == 1 && tablaJoc[3][3] == 0){ tablaJoc[3][3] = 2; return 0; }
	if (tablaJoc[3][1] == 1 && tablaJoc[3][3] == 1 && tablaJoc[3][2] == 0){ tablaJoc[3][2] = 2; return 0; }
	if (tablaJoc[3][2] == 1 && tablaJoc[3][3] == 1 && tablaJoc[3][1] == 0){ tablaJoc[3][1] = 2; return 0; }

	//Prima coloana
	if (tablaJoc[1][1] == 1 && tablaJoc[2][1] == 1 && tablaJoc[3][1] == 0){ tablaJoc[3][1] = 2; return 0; }
	if (tablaJoc[1][1] == 1 && tablaJoc[3][1] == 1 && tablaJoc[2][1] == 0){ tablaJoc[2][1] = 2; return 0; }
	if (tablaJoc[2][1] == 1 && tablaJoc[3][1] == 1 && tablaJoc[1][1] == 0){ tablaJoc[1][1] = 2; return 0; }
	
	//A doua coloana
	if (tablaJoc[1][2] == 1 && tablaJoc[2][2] == 1 && tablaJoc[3][2] == 0){ tablaJoc[3][2] = 2; return 0; }
	if (tablaJoc[1][2] == 1 && tablaJoc[3][2] == 1 && tablaJoc[2][2] == 0){ tablaJoc[2][2] = 2; return 0; }
	if (tablaJoc[2][2] == 1 && tablaJoc[3][2] == 1 && tablaJoc[1][2] == 0){ tablaJoc[1][2] = 2; return 0; }

	//A treia coloana
	if (tablaJoc[1][3] == 1 && tablaJoc[2][3] == 1 && tablaJoc[3][3] == 0){ tablaJoc[3][3] = 2; return 0; }
	if (tablaJoc[1][3] == 1 && tablaJoc[3][3] == 1 && tablaJoc[2][3] == 0){ tablaJoc[2][3] = 2; return 0; }
	if (tablaJoc[2][3] == 1 && tablaJoc[3][3] == 1 && tablaJoc[1][3] == 0){ tablaJoc[1][3] = 2; return 0; }

	//Diagonala principala
	if (tablaJoc[1][1] == 1 && tablaJoc[2][2] == 1 && tablaJoc[3][3] == 0){ tablaJoc[3][3] = 2; return 0; }
	if (tablaJoc[1][1] == 1 && tablaJoc[3][3] == 1 && tablaJoc[2][2] == 0){ tablaJoc[2][2] = 2; return 0; }
	if (tablaJoc[2][2] == 1 && tablaJoc[3][3] == 1 && tablaJoc[1][1] == 0){ tablaJoc[1][1] = 2; return 0; }

	//Diagonala secundara
	if (tablaJoc[1][3] == 1 && tablaJoc[2][2] == 1 && tablaJoc[3][1] == 0){ tablaJoc[3][1] = 2; return 0; }
	if (tablaJoc[2][2] == 1 && tablaJoc[3][1] == 1 && tablaJoc[1][3] == 0) { tablaJoc[1][3] = 2; return 0; }
	if (tablaJoc[1][3] == 1 && tablaJoc[3][1] == 1 && tablaJoc[2][2] == 0) { tablaJoc[2][2] = 2; return 0; }
	

	if (tablaJoc[2][2] == 0) { tablaJoc[2][2] = 2; return 0; }
	if (tablaJoc[1][1] == 0) { tablaJoc[1][1] = 2; return 0; }
	if (tablaJoc[1][3] == 0) { tablaJoc[1][3] = 2; return 0; }
	if (tablaJoc[3][1] == 0) { tablaJoc[3][1] = 2; return 0; }
	if (tablaJoc[3][3] == 0) { tablaJoc[3][3] = 2; return 0; }

	for (int i = 1; i <= 3; i++) {
		for (int j = 1; j <= 3; j++) {
			if (tablaJoc[i][j] == 0) {
				tablaJoc[i][j] = 2;
				return 0;
			}
		}
	}
	return 0;
}

int verificareMatrice() {

	if (tablaJoc[1][1] == tablaJoc[1][2] && tablaJoc[1][2] == tablaJoc[1][3] && tablaJoc[1][3] > 0) return tablaJoc[1][3];
	if (tablaJoc[2][1] == tablaJoc[2][2] && tablaJoc[2][2] == tablaJoc[2][3] && tablaJoc[2][3] > 0) return tablaJoc[1][3];
	if (tablaJoc[3][1] == tablaJoc[3][2] && tablaJoc[3][2] == tablaJoc[3][3] && tablaJoc[3][3] > 0) return tablaJoc[1][3];

	if (tablaJoc[1][1] == tablaJoc[2][1] && tablaJoc[2][1] == tablaJoc[3][1] && tablaJoc[3][1] > 0) return tablaJoc[3][1];
	if (tablaJoc[1][2] == tablaJoc[2][2] && tablaJoc[2][2] == tablaJoc[3][2] && tablaJoc[3][2] > 0) return tablaJoc[3][1];
	if (tablaJoc[1][3] == tablaJoc[2][3] && tablaJoc[2][3] == tablaJoc[3][3] && tablaJoc[3][3] > 0) return tablaJoc[3][1];

	if (tablaJoc[1][1] == tablaJoc[2][2] && tablaJoc[2][2] == tablaJoc[3][3] && tablaJoc[3][3] > 0) return tablaJoc[2][2]; // Diagonala principala
	if (tablaJoc[1][3] == tablaJoc[2][2] && tablaJoc[2][2] == tablaJoc[3][1] && tablaJoc[3][1] > 0) return tablaJoc[2][2]; // Diagonala secundara
	return -1;
}
bool endGame = false;
int x, y;
int main()
{
	while (!endGame) {

		randComputer();

		if (verificareMatrice() == 1) {
			cout << "Ati castigat !";
			endGame = 1;
		}
		else if (verificareMatrice() == 2) {
			cout << "Prostule , te-a batut calculatorul !!!" << endl << "HAHAHAHAHA" << endl;
			endGame = 1;
		}

		afiseazaMatrice();
		cout << endl << "Dati coordonatele :"; cin >> x >> y;
		if(!tablaJoc[x][y]) tablaJoc[x][y] = 1;

		if (verificareMatrice() == 1) {
			cout << "Ati casdetigat !";
			endGame = 1;
		}
		else if (verificareMatrice() == 2) {
			cout << "Prostule , te-a batut calculatorul !!!" << endl << "HAHAHAHAHA" << endl;
			endGame = 1;
		}
	}

	afiseazaMatrice();
}
